// Code generated by mockery v1.0.0. DO NOT EDIT.

package msgqueuemocks

import (
	context "context"

	msgqueue "github.com/gavrilaf/dyson/pkg/msgqueue"
	mock "github.com/stretchr/testify/mock"
)

// Publisher is an autogenerated mock type for the Publisher type
type Publisher struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Publisher) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, data, attributes
func (_m *Publisher) Publish(ctx context.Context, data []byte, attributes map[string]string) (msgqueue.PublishResult, error) {
	ret := _m.Called(ctx, data, attributes)

	var r0 msgqueue.PublishResult
	if rf, ok := ret.Get(0).(func(context.Context, []byte, map[string]string) msgqueue.PublishResult); ok {
		r0 = rf(ctx, data, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(msgqueue.PublishResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte, map[string]string) error); ok {
		r1 = rf(ctx, data, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopicID provides a mock function with given fields:
func (_m *Publisher) TopicID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
